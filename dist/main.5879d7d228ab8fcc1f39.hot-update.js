exports.id = "main";
exports.modules = {

/***/ "./routes/dish.js":
/*!************************!*\
  !*** ./routes/dish.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\nconst router = express.Router();\n\nconst { DishModel } = __webpack_require__(/*! ../db/db.module */ \"./db/db.module.js\");\n\nconst dishValidator = __webpack_require__(/*! ../middlewares/dish.validator */ \"./middlewares/dish.validator.js\");\n\nrouter.get('/', async (req, res, next) => {\n  const limit = +req.query.limit ? +req.query.limit : 10;\n  const offset = +req.query.offset ? +req.query.offset : 0;\n\n  try {\n    const { tags, authorId, favorite, sortBy, sortType } = req.query;\n\n    const params = {};\n\n    if (tags) {\n      tags = tags.split(',');\n      params.tags = { $in: tags };\n    }\n\n    if (authorId) {\n      params.authorId = authorId;\n    }\n\n    if (favorite) {\n      params.favorite = favorite;\n    }\n\n    const dishes = await DishModel.find(params, '-__v')\n      .sort({\n        [sortBy]: sortType\n      })\n      .skip(offset)\n      .limit(limit)\n      .exec();\n\n    return res.json({\n      data: dishes,\n      meta: {\n        limit,\n        offset\n      }\n    });\n  } catch (e) {\n    return res.status(500).json({ message: 'Что-то пошло не так =(' });\n  }\n});\n\nrouter.get('/:id', async (req, res, next) => {\n  try {\n    const id = req.params.id;\n    const dish = await DishModel.findById(id, '-__v')\n      .populate({ path: 'authorId', select: '_id' })\n      .exec();\n\n    return res.json({\n      data: dish,\n      meta: null\n    });\n  } catch {\n    return res.status(500).json({ message: 'Что-то пошло не так =(' });\n  }\n});\n\nrouter.post('/', dishValidator, async (req, res, next) => {\n  try {\n    const dish = await new DishModel(req.body).save();\n\n    return res.json({\n      data: dish,\n      meta: null\n    });\n  } catch (e) {\n    return res.status(500).json({ message: 'Что-то пошло не так =(' });\n  }\n});\n\nrouter.put('/:id', dishValidator, async (req, res, next) => {\n  try {\n    const id = req.params.id;\n    const { authorId } = req.body;\n\n    let dish = await DishModel.findById(id)\n      .populate({ path: 'authorId', select: '_id' })\n      .exec();\n\n    if (dish.authorId._id.toString() !== authorId) {\n      return res\n        .status(400)\n        .json({ message: 'Нельзя менять рецепты других авторов!' });\n    }\n\n    await DishModel.findByIdAndUpdate(id, req.body).exec();\n    dish = await DishModel.findById(id, '-__v').populate({\n      path: 'authorId',\n      select: '_id'\n    });\n\n    return res.json({\n      data: dish,\n      meta: null\n    });\n  } catch (e) {\n    return res.status(500).json({ message: 'Что-то пошло не так =(' });\n  }\n});\n\nrouter.delete('/:id', async (req, res, next) => {\n  try {\n    const userId = req.user._id;\n    const id = req.params.id;\n\n    const dish = await DishModel.findById(id)\n      .populate({ path: 'authorId', select: '_id' })\n      .exec();\n\n    if (dish.authorId._id.toString() !== userId.toString()) {\n      return res\n        .status(400)\n        .json({ message: 'Нельзя удалять рецепты других авторов!' });\n    }\n\n    await DishModel.deleteOne({ _id: id }).exec();\n    return res.status(500).json({ message: 'Блюдо, удалено.' });\n  } catch (e) {\n    return res.status(500).json({ message: 'Что-то пошло не так =(' });\n  }\n});\n\nmodule.exports = router;\n\n\n//# sourceURL=webpack:///./routes/dish.js?");

/***/ })

};